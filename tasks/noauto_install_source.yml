---
- name: Install golang from source
  block:
    - name: Import installed golang version check
      ansible.builtin.include_tasks: noauto_check_installed_version.yml
      when: golang_installed_version is not defined

    - name: Force install if the version numbers do not match
      ansible.builtin.set_fact:
        golang_force_install: true
      when:
        - golang_installed_version is defined
        - golang_installed_version != golang_version

    - name: Install golang from source
      when: golang_installed_version is not defined or golang_force_install
      block:
        - name: Uninstall current golang installation
          ansible.builtin.include_tasks: noauto_uninstall.yml
          when: golang_installed_version is defined and golang_installed_version != ""

        - name: Retrieve golang installer checksum
          block:
            - name: Retrieve golang release metadata
              ansible.builtin.uri:
                url: "https://go.dev/dl/?mode=json&include=all"
                return_content: yes
              register: golang_releases_response

            - name: Parse golang release metadata
              ansible.builtin.set_fact:
                golang_releases: "{{ golang_releases_response.content | from_json }}"

            - name: Debug golang releases
              ansible.builtin.debug:
                msg: "Golang releases: {{ golang_releases }}"

            - name: Set go_version_prefixed
              ansible.builtin.set_fact:
                golang_version_prefixed: "go{{ golang_version }}"

            - name: Get release data
              ansible.builtin.set_fact:
                golang_release_data: >-
                  {{
                    golang_releases
                    | selectattr('version', 'equalto', golang_version_prefixed)
                    | map(attribute='files')
                    | flatten
                    | selectattr('os', 'equalto', golang_platform)
                    | selectattr('arch', 'equalto', golang_arch)
                    | list
                    | first
                  }}

            - name: Debug golang release data
              ansible.builtin.debug:
                msg: "Golang release data: {{ golang_release_data }}"

            - name: Set release facts
              ansible.builtin.set_fact:
                golang_download_checksum: "{{ golang_release_data.sha256 }}"

        - name: Download golang package
          ansible.builtin.get_url:
            url: "{{ golang_download_url }}"
            dest: "{{ golang_download_dir }}"
            checksum: "sha256:{{ golang_download_checksum }}"
            mode: "0755"
            owner: root
            group: root
          become: true

        - name: Ensure golang installation folder exists
          ansible.builtin.file:
            path: "{{ golang_install_path }}"
            state: directory
            mode: "0755"
            owner: root
            group: root
          become: true

        - name: Extract archive
          ansible.builtin.unarchive:
            src: "{{ golang_download_dir }}/{{ golang_archive_name }}"
            dest: "{{ golang_install_path }}"
            remote_src: true
            extra_opts: ["--strip-components=1"]
            creates: "{{ golang_install_path }}/bin/go"
          become: true

        - name: Create golang symlink
          ansible.builtin.file:
            src: "{{ golang_install_path }}/bin/go"
            dest: "/usr/local/bin/go"
            state: link
            force: true
            mode: "0755"
            owner: root
            group: root
          become: true

        - name: Remove archive
          ansible.builtin.file:
            path: "{{ golang_download_dir }}/{{ golang_archive_name }}"
            state: absent
          become: true
